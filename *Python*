2003-07-01
2003-08-01
2003-09-01
2003-10-01
2003-11-01
2003-12-01
2004-01-01
2004-02-01
2004-03-01
2004-04-01
2004-05-01
2004-06-01
2004-07-01
2004-08-01
2004-09-01
2004-10-01
2004-11-01
2004-12-01
2005-01-01
2005-02-01
2005-03-01
2005-04-01
2005-05-01
2005-06-01
2005-07-01
2005-08-01
2005-09-01
2005-10-01
2005-11-01
2005-12-01
2006-01-01
2006-02-01
2006-03-01
2006-04-01
2006-05-01
2006-06-01
2006-07-01
2006-08-01
2006-09-01
2006-10-01
2006-11-01
2006-12-01
2007-01-01
2007-02-01
2007-03-01
2007-04-01
2007-05-01
2007-06-01
2007-07-01
2007-08-01
2007-09-01
2007-10-01
2007-11-01
2007-12-01
2008-01-01
2008-02-01
2008-03-01
2008-04-01
2008-05-01
2008-06-01
2008-07-01
2008-08-01
2008-09-01
2008-10-01
2008-11-01
2008-12-01
2009-01-01
2009-02-01
2009-03-01
2009-04-01
2009-05-01
2009-06-01
2009-07-01
2009-08-01
2009-09-01
2009-10-01
2009-11-01
2009-12-01
2010-01-01
2010-02-01
2010-03-01
2010-04-01
2010-05-01
2010-06-01
2010-07-01
2010-08-01
2010-09-01
2010-10-01
2010-11-01
2010-12-01
2011-01-01
2011-02-01
2011-03-01
2011-04-01
2011-05-01
2011-06-01
2011-07-01
2011-08-01
2011-09-01
2011-10-01
2011-11-01
2011-12-01
2012-01-01
2012-02-01
2012-03-01
2012-04-01
2012-05-01
2012-06-01
2012-07-01
2012-08-01
2012-09-01
2012-10-01
2012-11-01
2012-12-01
2013-01-01
2013-02-01
2013-03-01
2013-04-01
2013-05-01
2013-06-01
2013-07-01
2013-08-01
2013-09-01
2013-10-01
2013-11-01
2013-12-01
2014-01-01
2014-02-01
2014-03-01
2014-04-01
2014-05-01
2014-06-01
2014-07-01
2014-08-01
2014-09-01
2014-10-01
2014-11-01
2014-12-01
2015-01-01
2015-02-01
2015-03-01
2015-04-01
2015-05-01
2015-06-01
2015-07-01
2015-08-01
2015-09-01
2015-10-01
2015-11-01
2015-12-01
2016-01-01
2016-02-01
2016-03-01
2016-04-01
2016-05-01
2016-06-01
2016-07-01
2016-08-01
2016-09-01
2016-10-01
2016-11-01
2016-12-01
2017-01-01
2017-02-01
2017-03-01
2017-04-01
2017-05-01
2017-06-01
2017-07-01
2017-08-01
2017-09-01
2017-10-01
2017-11-01
2017-12-01
2018-01-01
2018-02-01
2018-03-01
2018-04-01
2018-05-01
2018-06-01
2018-07-01
2018-08-01
2018-09-01
2018-10-01
2018-11-01
2018-12-01
2019-01-01
2019-02-01
2019-03-01
2019-04-01
2019-05-01
2019-06-01
2019-07-01
2019-08-01
2019-09-01
2019-10-01
2019-11-01
2019-12-01
2020-01-01
2020-02-01

In [6]: lat_dhdt
Out[6]: 
array([[58.      , 58.04375 , 58.086063, ..., 57.86721 , 57.817993,
        57.767372],
       [58.20927 , 58.25337 , 58.29602 , ..., 58.07543 , 58.025826,
        57.974808],
       [58.418682, 58.463135, 58.506126, ..., 58.28378 , 58.23378 ,
        58.18236 ],
       ...,
       [81.8854  , 82.077286, 82.26715 , ..., 81.32748 , 81.12904 ,
        80.929184],
       [82.0078  , 82.202736, 82.395775, ..., 81.441795, 81.24073 ,
        81.038345],
       [82.125404, 82.323364, 82.51955 , ..., 81.551414, 81.34776 ,
        81.1429  ]], dtype=float32)

In [7]: lon_dhdt
Out[7]: 
array([[ -57.      ,  -56.605404,  -56.20969 , ...,  -31.879536,
         -31.489553,  -31.100845],
       [ -57.08433 ,  -56.687122,  -56.28877 , ...,  -31.787867,
         -31.395365,  -31.00416 ],
       [ -57.16984 ,  -56.76998 ,  -56.368954, ...,  -31.694931,
         -31.299877,  -30.906147],
       ...,
       [-102.107376, -101.20236 , -100.25252 , ...,   14.46838 ,
          15.224183,   15.946672],
       [-103.49459 , -102.60966 , -101.67944 , ...,   15.796948,
          16.532125,   17.234083],
       [-104.924225, -104.06222 , -103.154655, ...,   17.160866,
          17.873264,   18.552685]], dtype=float32)

In [8]: plt.imshow(lat_dhdt)
Out[8]: <matplotlib.image.AxesImage at 0x7fa10c4f0940>

In [9]: lat_dhdt = np.flipud(ds.lat.values)
    ... lon_dhdt = ds.lon.values


In [10]: plt.imshow(lat_dhdt)
Out[10]: <matplotlib.image.AxesImage at 0x7fa10c4f8f40>

In [11]: #!/usr/bin/env python3
     ... 
     ... """
     ... 
     ... @author: Adrien Wehrl√©, University of Zurich, Switzerland
     ... 
     ... and Jason Box
     ... 
     ... """
     ... 
     ... ...
     ... ax1.imshow(bedmachine_grid_m[:, :, 0])
     ... ax2 = plt.subplot(132)
     ... ax2.imshow(bedmachine_grid_m[:, :, 1])
     ... ax3 = plt.subplot(133)
     ... ax3.imshow(bedmachine_grid_m[:, :, 2])
     ... 
     ... # match
     ... indexes = gm.match_m2m_old(bedmachine_grid_m, dhdt_grid_m, only_indexes=True)
     ... 
     ... dhdt_on_bedmachine = dhdt_grid_m[:, :, 2].flatten()[indexes]

(123, 65)
1990-01-01
1990-02-01
1990-03-01
1990-04-01
1990-05-01
1990-06-01
1990-07-01
1990-08-01
1990-09-01
1990-10-01
1990-11-01
1990-12-01
1991-01-01
1991-02-01
1991-03-01
1991-04-01
1991-05-01
1991-06-01
1991-07-01
1991-08-01
1991-09-01
1991-10-01
1991-11-01
1991-12-01
1992-01-01
1992-02-01
1992-03-01
1992-04-01
1992-05-01
1992-06-01
1992-07-01
1992-08-01
1992-09-01
1992-10-01
1992-11-01
1992-12-01
1993-01-01
1993-02-01
1993-03-01
1993-04-01
1993-05-01
1993-06-01
1993-07-01
1993-08-01
1993-09-01
1993-10-01
1993-11-01
1993-12-01
1994-01-01
1994-02-01
1994-03-01
1994-04-01
1994-05-01
1994-06-01
1994-07-01
1994-08-01
1994-09-01
1994-10-01
1994-11-01
1994-12-01
1995-01-01
1995-02-01
1995-03-01
1995-04-01
1995-05-01
1995-06-01
1995-07-01
1995-08-01
1995-09-01
1995-10-01
1995-11-01
1995-12-01
1996-01-01
1996-02-01
1996-03-01
1996-04-01
1996-05-01
1996-06-01
1996-07-01
1996-08-01
1996-09-01
1996-10-01
1996-11-01
1996-12-01
1997-01-01
1997-02-01
1997-03-01
1997-04-01
1997-05-01
1997-06-01
1997-07-01
1997-08-01
1997-09-01
1997-10-01
1997-11-01
1997-12-01
1998-01-01
1998-02-01
1998-03-01
1998-04-01
1998-05-01
1998-06-01
1998-07-01
1998-08-01
1998-09-01
1998-10-01
1998-11-01
1998-12-01
1999-01-01
1999-02-01
1999-03-01
1999-04-01
1999-05-01
1999-06-01
1999-07-01
1999-08-01
1999-09-01
1999-10-01
1999-11-01
1999-12-01
2000-01-01
2000-02-01
2000-03-01
2000-04-01
2000-05-01
2000-06-01
2000-07-01
2000-08-01
2000-09-01
2000-10-01
2000-11-01
2000-12-01
2001-01-01
2001-02-01
2001-03-01
2001-04-01
2001-05-01
2001-06-01
2001-07-01
2001-08-01
2001-09-01
2001-10-01
2001-11-01
2001-12-01
2002-01-01
2002-02-01
2002-03-01
2002-04-01
2002-05-01
2002-06-01
2002-07-01
2002-08-01
2002-09-01
2002-10-01
2002-11-01
2002-12-01
2003-01-01
2003-02-01
2003-03-01
2003-04-01
2003-05-01
2003-06-01
2003-07-01
2003-08-01
2003-09-01
2003-10-01
2003-11-01
2003-12-01
2004-01-01
2004-02-01
2004-03-01
2004-04-01
2004-05-01
2004-06-01
2004-07-01
2004-08-01
2004-09-01
2004-10-01
2004-11-01
2004-12-01
2005-01-01
2005-02-01
2005-03-01
2005-04-01
2005-05-01
2005-06-01
2005-07-01
2005-08-01
2005-09-01
2005-10-01
2005-11-01
2005-12-01
2006-01-01
2006-02-01
2006-03-01
2006-04-01
2006-05-01
2006-06-01
2006-07-01
2006-08-01
2006-09-01
2006-10-01
2006-11-01
2006-12-01
2007-01-01
2007-02-01
2007-03-01
2007-04-01
2007-05-01
2007-06-01
2007-07-01
2007-08-01
2007-09-01
2007-10-01
2007-11-01
2007-12-01
2008-01-01
2008-02-01
2008-03-01
2008-04-01
2008-05-01
2008-06-01
2008-07-01
2008-08-01
2008-09-01
2008-10-01
2008-11-01
2008-12-01
2009-01-01
2009-02-01
2009-03-01
2009-04-01
2009-05-01
2009-06-01
2009-07-01
2009-08-01
2009-09-01
2009-10-01
2009-11-01
2009-12-01
2010-01-01
2010-02-01
2010-03-01
2010-04-01
2010-05-01
2010-06-01
2010-07-01
2010-08-01
2010-09-01
2010-10-01
2010-11-01
2010-12-01
2011-01-01
2011-02-01
2011-03-01
2011-04-01
2011-05-01
2011-06-01
2011-07-01
2011-08-01
2011-09-01
2011-10-01
2011-11-01
2011-12-01
2012-01-01
2012-02-01
2012-03-01
2012-04-01
2012-05-01
2012-06-01
2012-07-01
2012-08-01
2012-09-01
2012-10-01
2012-11-01
2012-12-01
2013-01-01
2013-02-01
2013-03-01
2013-04-01
2013-05-01
2013-06-01
2013-07-01
2013-08-01
2013-09-01
2013-10-01
2013-11-01
2013-12-01
2014-01-01
2014-02-01
2014-03-01
2014-04-01
2014-05-01
2014-06-01
2014-07-01
2014-08-01
2014-09-01
2014-10-01
2014-11-01
2014-12-01
2015-01-01
2015-02-01
2015-03-01
2015-04-01
2015-05-01
2015-06-01
2015-07-01
2015-08-01
2015-09-01
2015-10-01
2015-11-01
2015-12-01
2016-01-01
2016-02-01
2016-03-01
2016-04-01
2016-05-01
2016-06-01
2016-07-01
2016-08-01
2016-09-01
2016-10-01
2016-11-01
2016-12-01
2017-01-01
2017-02-01
2017-03-01
2017-04-01
2017-05-01
2017-06-01
2017-07-01
2017-08-01
2017-09-01
2017-10-01
2017-11-01
2017-12-01
2018-01-01
2018-02-01
2018-03-01
2018-04-01
2018-05-01
2018-06-01
2018-07-01
2018-08-01
2018-09-01
2018-10-01
2018-11-01
2018-12-01
2019-01-01
2019-02-01
2019-03-01
2019-04-01
2019-05-01
2019-06-01
2019-07-01
2019-08-01
2019-09-01
2019-10-01
2019-11-01
2019-12-01
2020-01-01
2020-02-01
Finished 'convert_grid_coordinates' in 0.0209 seconds
Finished 'match_m2m_old' in 10.7170 seconds

In [12]: plt.imshow(dhdt_on_bedmachine)
Out[12]: <matplotlib.image.AxesImage at 0x7fa10c1f5250>

In [13]: plt.close('all')

In [14]: plt.ion()
Out[14]: <matplotlib.pyplot._IonContext at 0x7fa10c1f5c10>

In [15]: plt.imshow(dhdt_on_bedmachine)
Out[15]: <matplotlib.image.AxesImage at 0x7fa10c224a60>

In [16]: plt.imshow(lat_dhdt)
Out[16]: <matplotlib.image.AxesImage at 0x7fa10c4f8040>

In [17]: plt.figure(); plt.imshow(ds.variables["dhdt"])
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
Input In [17], in <cell line: 1>()
----> 1 plt.figure(); plt.imshow(ds.variables["dhdt"])

File ~/mambaforge3/envs/EO-IO/lib/python3.9/site-packages/matplotlib/_api/deprecation.py:459, in make_keyword_only.<locals>.wrapper(*args, **kwargs)
    453 if len(args) > name_idx:
    454     warn_deprecated(
    455         since, message="Passing the %(name)s %(obj_type)s "
    456         "positionally is deprecated since Matplotlib %(since)s; the "
    457         "parameter will become keyword-only %(removal)s.",
    458         name=name, obj_type=f"parameter of {func.__name__}()")
--> 459 return func(*args, **kwargs)

File ~/mambaforge3/envs/EO-IO/lib/python3.9/site-packages/matplotlib/pyplot.py:2652, in imshow(X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, interpolation_stage, filternorm, filterrad, resample, url, data, **kwargs)
   2646 @_copy_docstring_and_deprecators(Axes.imshow)
   2647 def imshow(
   2648         X, cmap=None, norm=None, aspect=None, interpolation=None,
   2649         alpha=None, vmin=None, vmax=None, origin=None, extent=None, *,
   2650         interpolation_stage=None, filternorm=True, filterrad=4.0,
   2651         resample=None, url=None, data=None, **kwargs):
-> 2652     __ret = gca().imshow(
   2653         X, cmap=cmap, norm=norm, aspect=aspect,
   2654         interpolation=interpolation, alpha=alpha, vmin=vmin,
   2655         vmax=vmax, origin=origin, extent=extent,
   2656         interpolation_stage=interpolation_stage,
   2657         filternorm=filternorm, filterrad=filterrad, resample=resample,
   2658         url=url, **({"data": data} if data is not None else {}),
   2659         **kwargs)
   2660     sci(__ret)
   2661     return __ret

File ~/mambaforge3/envs/EO-IO/lib/python3.9/site-packages/matplotlib/_api/deprecation.py:459, in make_keyword_only.<locals>.wrapper(*args, **kwargs)
    453 if len(args) > name_idx:
    454     warn_deprecated(
    455         since, message="Passing the %(name)s %(obj_type)s "
    456         "positionally is deprecated since Matplotlib %(since)s; the "
    457         "parameter will become keyword-only %(removal)s.",
    458         name=name, obj_type=f"parameter of {func.__name__}()")
--> 459 return func(*args, **kwargs)

File ~/mambaforge3/envs/EO-IO/lib/python3.9/site-packages/matplotlib/__init__.py:1412, in _preprocess_data.<locals>.inner(ax, data, *args, **kwargs)
   1409 @functools.wraps(func)
   1410 def inner(ax, *args, data=None, **kwargs):
   1411     if data is None:
-> 1412         return func(ax, *map(sanitize_sequence, args), **kwargs)
   1414     bound = new_sig.bind(ax, *args, **kwargs)
   1415     auto_label = (bound.arguments.get(label_namer)
   1416                   or bound.kwargs.get(label_namer))

File ~/mambaforge3/envs/EO-IO/lib/python3.9/site-packages/matplotlib/axes/_axes.py:5481, in Axes.imshow(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, interpolation_stage, filternorm, filterrad, resample, url, **kwargs)
   5474 self.set_aspect(aspect)
   5475 im = mimage.AxesImage(self, cmap, norm, interpolation,
   5476                       origin, extent, filternorm=filternorm,
   5477                       filterrad=filterrad, resample=resample,
   5478                       interpolation_stage=interpolation_stage,
   5479                       **kwargs)
-> 5481 im.set_data(X)
   5482 im.set_alpha(alpha)
   5483 if im.get_clip_path() is None:
   5484     # image does not already have clipping set, clip to axes patch

File ~/mambaforge3/envs/EO-IO/lib/python3.9/site-packages/matplotlib/image.py:715, in _ImageBase.set_data(self, A)
    711     self._A = self._A[:, :, 0]
    713 if not (self._A.ndim == 2
    714         or self._A.ndim == 3 and self._A.shape[-1] in [3, 4]):
--> 715     raise TypeError("Invalid shape {} for image data"
    716                     .format(self._A.shape))
    718 if self._A.ndim == 3:
    719     # If the input data has values outside the valid range (after
    720     # normalisation), we issue a warning and then clip X to the bounds
    721     # - otherwise casting wraps extreme values, hiding outliers and
    722     # making reliable interpretation impossible.
    723     high = 255 if np.issubdtype(self._A.dtype, np.integer) else 1

TypeError: Invalid shape (123, 65, 362) for image data

In [18]: plt.figure(); plt.imshow(ds.variables["dhdt"][:, :, 0])
Out[18]: <matplotlib.image.AxesImage at 0x7fa068407d90>

In [19]: plt.imshow(lon_dhdt)
Out[19]: <matplotlib.image.AxesImage at 0x7fa10c094e50>

In [20]: fn = f"{base_path}/raw/C3S_GrIS_RA_SEC_25km_vers3_2022-08-20.nc"
     ... ds = np.flipud(xr.open_dataset(fn))
     ... 
     ... niE = np.shape(ds.lat.values)[1]
     ... njE = np.shape(ds.lon.values)[0]
     ... print(np.shape(ds.lon))
     ... 
     ... lat_dhdt = np.flipud(ds.lat.values)
     ... lon_dhdt = np.flipud(ds.lon.values)
     ... 
     ... ...
     ... ax3 = plt.subplot(133)
     ... ax3.imshow(dhdt_grid_m[:, :, 2])
     ... 
     ... plt.figure()
     ... ax1 = plt.subplot(131)
     ... ax1.imshow(bedmachine_grid_m[:, :, 0])
     ... ax2 = plt.subplot(132)
     ... ax2.imshow(bedmachine_grid_m[:, :, 1])
     ... ax3 = plt.subplot(133)
     ... ax3.imshow(bedmachine_grid_m[:, :, 2])

---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
File ~/EO-IO/DEM_4D/src/match_dhdt_BedMachine.py:54, in <module>
     51 # %% read and preprocess dhdt
     53 fn = f"{base_path}/raw/C3S_GrIS_RA_SEC_25km_vers3_2022-08-20.nc"
---> 54 ds = np.flipud(xr.open_dataset(fn))
     56 niE = np.shape(ds.lat.values)[1]
     57 njE = np.shape(ds.lon.values)[0]

File <__array_function__ internals>:180, in flipud(*args, **kwargs)

File ~/mambaforge3/envs/EO-IO/lib/python3.9/site-packages/numpy/lib/twodim_base.py:151, in flipud(m)
    101 @array_function_dispatch(_flip_dispatcher)
    102 def flipud(m):
    103     """
    104     Reverse the order of elements along axis 0 (up/down).
    105 
   (...)
    149 
    150     """
--> 151     m = asanyarray(m)
    152     if m.ndim < 1:
    153         raise ValueError("Input must be >= 1-d.")

File ~/mambaforge3/envs/EO-IO/lib/python3.9/site-packages/xarray/core/dataset.py:1457, in Dataset.__array__(self, dtype)
   1456 def __array__(self, dtype=None):
-> 1457     raise TypeError(
   1458         "cannot directly convert an xarray.Dataset into a "
   1459         "numpy array. Instead, create an xarray.DataArray "
   1460         "first, either with indexing on the Dataset or by "
   1461         "invoking the `to_array()` method."
   1462     )

TypeError: cannot directly convert an xarray.Dataset into a numpy array. Instead, create an xarray.DataArray first, either with indexing on the Dataset or by invoking the `to_array()` method.

In [21]: fn = f"{base_path}/raw/C3S_GrIS_RA_SEC_25km_vers3_2022-08-20.nc"
     ... ds = xr.open_dataset(fn)
     ... 
     ... niE = np.shape(ds.lat.values)[1]
     ... njE = np.shape(ds.lon.values)[0]
     ... print(np.shape(ds.lon))
     ... 
     ... lat_dhdt = np.flipud(ds.lat.values)
     ... lon_dhdt = np.flipud(ds.lon.values)
     ... 
     ... ...
     ... 
     ...     offset = start + delta  # Add the specified number of days to 1990
     ... 
     ...     datestring = offset.strftime("%Y-%m-%d")
     ... 
     ...     print(datestring)  # >>>  2015-12-01
     ... 
     ...     dhdt = np.flipud(np.array(ds.variables["dhdt"][:, :, i]))
     ...     dhdt[mask == 0] = np.nan
     ...     dhdt_sum += dhdt

(123, 65)
1990-01-01
1990-02-01
1990-03-01
1990-04-01
1990-05-01
1990-06-01
1990-07-01
1990-08-01
1990-09-01
1990-10-01
1990-11-01
1990-12-01
1991-01-01
1991-02-01
1991-03-01
1991-04-01
1991-05-01
1991-06-01
1991-07-01
1991-08-01
1991-09-01
1991-10-01
1991-11-01
1991-12-01
1992-01-01
1992-02-01
1992-03-01
1992-04-01
1992-05-01
1992-06-01
1992-07-01
1992-08-01
1992-09-01
1992-10-01
1992-11-01
1992-12-01
1993-01-01
1993-02-01
1993-03-01
1993-04-01
1993-05-01
1993-06-01
1993-07-01
1993-08-01
1993-09-01
1993-10-01
1993-11-01
1993-12-01
1994-01-01
1994-02-01
1994-03-01
1994-04-01
1994-05-01
1994-06-01
1994-07-01
1994-08-01
1994-09-01
1994-10-01
1994-11-01
1994-12-01
1995-01-01
1995-02-01
1995-03-01
1995-04-01
1995-05-01
1995-06-01
1995-07-01
1995-08-01
1995-09-01
1995-10-01
1995-11-01
1995-12-01
1996-01-01
1996-02-01
1996-03-01
1996-04-01
1996-05-01
1996-06-01
1996-07-01
1996-08-01
1996-09-01
1996-10-01
1996-11-01
1996-12-01
1997-01-01
1997-02-01
1997-03-01
1997-04-01
1997-05-01
1997-06-01
1997-07-01
1997-08-01
1997-09-01
1997-10-01
1997-11-01
1997-12-01
1998-01-01
1998-02-01
1998-03-01
1998-04-01
1998-05-01
1998-06-01
1998-07-01
1998-08-01
1998-09-01
1998-10-01
1998-11-01
1998-12-01
1999-01-01
1999-02-01
1999-03-01
1999-04-01
1999-05-01
1999-06-01
1999-07-01
1999-08-01
1999-09-01
1999-10-01
1999-11-01
1999-12-01
2000-01-01
2000-02-01
2000-03-01
2000-04-01
2000-05-01
2000-06-01
2000-07-01
2000-08-01
2000-09-01
2000-10-01
2000-11-01
2000-12-01
2001-01-01
2001-02-01
2001-03-01
2001-04-01
2001-05-01
2001-06-01
2001-07-01
2001-08-01
2001-09-01
2001-10-01
2001-11-01
2001-12-01
2002-01-01
2002-02-01
2002-03-01
2002-04-01
2002-05-01
2002-06-01
2002-07-01
2002-08-01
2002-09-01
2002-10-01
2002-11-01
2002-12-01
2003-01-01
2003-02-01
2003-03-01
2003-04-01
2003-05-01
2003-06-01
2003-07-01
2003-08-01
2003-09-01
2003-10-01
2003-11-01
2003-12-01
2004-01-01
2004-02-01
2004-03-01
2004-04-01
2004-05-01
2004-06-01
2004-07-01
2004-08-01
2004-09-01
2004-10-01
2004-11-01
2004-12-01
2005-01-01
2005-02-01
2005-03-01
2005-04-01
2005-05-01
2005-06-01
2005-07-01
2005-08-01
2005-09-01
2005-10-01
2005-11-01
2005-12-01
2006-01-01
2006-02-01
2006-03-01
2006-04-01
2006-05-01
2006-06-01
2006-07-01
2006-08-01
2006-09-01
2006-10-01
2006-11-01
2006-12-01
2007-01-01
2007-02-01
2007-03-01
2007-04-01
2007-05-01
2007-06-01
2007-07-01
2007-08-01
2007-09-01
2007-10-01
2007-11-01
2007-12-01
2008-01-01
2008-02-01
2008-03-01
2008-04-01
2008-05-01
2008-06-01
2008-07-01
2008-08-01
2008-09-01
2008-10-01
2008-11-01
2008-12-01
2009-01-01
2009-02-01
2009-03-01
2009-04-01
2009-05-01
2009-06-01
2009-07-01
2009-08-01
2009-09-01
2009-10-01
2009-11-01
2009-12-01
2010-01-01
2010-02-01
2010-03-01
2010-04-01
2010-05-01
2010-06-01
2010-07-01
2010-08-01
2010-09-01
2010-10-01
2010-11-01
2010-12-01
2011-01-01
2011-02-01
2011-03-01
2011-04-01
2011-05-01
2011-06-01
2011-07-01
2011-08-01
2011-09-01
2011-10-01
2011-11-01
2011-12-01
2012-01-01
2012-02-01
2012-03-01
2012-04-01
2012-05-01
2012-06-01
2012-07-01
2012-08-01
2012-09-01
2012-10-01
2012-11-01
2012-12-01
2013-01-01
2013-02-01
2013-03-01
2013-04-01
2013-05-01
2013-06-01
2013-07-01
2013-08-01
2013-09-01
2013-10-01
2013-11-01
2013-12-01
2014-01-01
2014-02-01
2014-03-01
2014-04-01
2014-05-01
2014-06-01
2014-07-01
2014-08-01
2014-09-01
2014-10-01
2014-11-01
2014-12-01
2015-01-01
2015-02-01
2015-03-01
2015-04-01
2015-05-01
2015-06-01
2015-07-01
2015-08-01
2015-09-01
2015-10-01
2015-11-01
2015-12-01
2016-01-01
2016-02-01
2016-03-01
2016-04-01
2016-05-01
2016-06-01
2016-07-01
2016-08-01
2016-09-01
2016-10-01
2016-11-01
2016-12-01
2017-01-01
2017-02-01
2017-03-01
2017-04-01
2017-05-01
2017-06-01
2017-07-01
2017-08-01
2017-09-01
2017-10-01
2017-11-01
2017-12-01
2018-01-01
2018-02-01
2018-03-01
2018-04-01
2018-05-01
2018-06-01
2018-07-01
2018-08-01
2018-09-01
2018-10-01
2018-11-01
2018-12-01
2019-01-01
2019-02-01
2019-03-01
2019-04-01
2019-05-01
2019-06-01
2019-07-01
2019-08-01
2019-09-01
2019-10-01
2019-11-01
2019-12-01
2020-01-01
2020-02-01

In [22]: plt.imshow(dhdt_sum)
Out[22]: <matplotlib.image.AxesImage at 0x7fa066478e50>

In [23]: fn = f"{base_path}/raw/C3S_GrIS_RA_SEC_25km_vers3_2022-08-20.nc"
     ... ds = xr.open_dataset(fn)
     ... 
     ... niE = np.shape(ds.lat.values)[1]
     ... njE = np.shape(ds.lon.values)[0]
     ... print(np.shape(ds.lon))
     ... 
     ... lat_dhdt = np.flipud(ds.lat.values)
     ... lon_dhdt = np.flipud(ds.lon.values)
     ... 
     ... ...
     ... indexes = gm.match_m2m_old(bedmachine_grid_m, dhdt_grid_m, only_indexes=True)
     ... 
     ... dhdt_on_bedmachine = dhdt_grid_m[:, :, 2].flatten()[indexes]
     ... 
     ... #%%
     ... import matplotlib.pyplot as plt
     ... 
     ... result = dhdt_on_bedmachine.copy()
     ... 
     ... result_smoothed = gaussian_filter(result, 20)

(123, 65)
1990-01-01
1990-02-01
1990-03-01
1990-04-01
1990-05-01
1990-06-01
1990-07-01
1990-08-01
1990-09-01
1990-10-01
1990-11-01
1990-12-01
1991-01-01
1991-02-01
1991-03-01
1991-04-01
1991-05-01
1991-06-01
1991-07-01
1991-08-01
1991-09-01
1991-10-01
1991-11-01
1991-12-01
1992-01-01
1992-02-01
1992-03-01
1992-04-01
1992-05-01
1992-06-01
1992-07-01
1992-08-01
1992-09-01
1992-10-01
1992-11-01
1992-12-01
1993-01-01
1993-02-01
1993-03-01
1993-04-01
1993-05-01
1993-06-01
1993-07-01
1993-08-01
1993-09-01
1993-10-01
1993-11-01
1993-12-01
1994-01-01
1994-02-01
1994-03-01
1994-04-01
1994-05-01
1994-06-01
1994-07-01
1994-08-01
1994-09-01
1994-10-01
1994-11-01
1994-12-01
1995-01-01
1995-02-01
1995-03-01
1995-04-01
1995-05-01
1995-06-01
1995-07-01
1995-08-01
1995-09-01
1995-10-01
1995-11-01
1995-12-01
1996-01-01
1996-02-01
1996-03-01
1996-04-01
1996-05-01
1996-06-01
1996-07-01
1996-08-01
1996-09-01
1996-10-01
1996-11-01
1996-12-01
1997-01-01
1997-02-01
1997-03-01
1997-04-01
1997-05-01
1997-06-01
1997-07-01
1997-08-01
1997-09-01
1997-10-01
1997-11-01
1997-12-01
1998-01-01
1998-02-01
1998-03-01
1998-04-01
1998-05-01
1998-06-01
1998-07-01
1998-08-01
1998-09-01
1998-10-01
1998-11-01
1998-12-01
1999-01-01
1999-02-01
1999-03-01
1999-04-01
1999-05-01
1999-06-01
1999-07-01
1999-08-01
1999-09-01
1999-10-01
1999-11-01
1999-12-01
2000-01-01
2000-02-01
2000-03-01
2000-04-01
2000-05-01
2000-06-01
2000-07-01
2000-08-01
2000-09-01
2000-10-01
2000-11-01
2000-12-01
2001-01-01
2001-02-01
2001-03-01
2001-04-01
2001-05-01
2001-06-01
2001-07-01
2001-08-01
2001-09-01
2001-10-01
2001-11-01
2001-12-01
2002-01-01
2002-02-01
2002-03-01
2002-04-01
2002-05-01
2002-06-01
2002-07-01
2002-08-01
2002-09-01
2002-10-01
2002-11-01
2002-12-01
2003-01-01
2003-02-01
2003-03-01
2003-04-01
2003-05-01
2003-06-01
2003-07-01
2003-08-01
2003-09-01
2003-10-01
2003-11-01
2003-12-01
2004-01-01
2004-02-01
2004-03-01
2004-04-01
2004-05-01
2004-06-01
2004-07-01
2004-08-01
2004-09-01
2004-10-01
2004-11-01
2004-12-01
2005-01-01
2005-02-01
2005-03-01
2005-04-01
2005-05-01
2005-06-01
2005-07-01
2005-08-01
2005-09-01
2005-10-01
2005-11-01
2005-12-01
2006-01-01
2006-02-01
2006-03-01
2006-04-01
2006-05-01
2006-06-01
2006-07-01
2006-08-01
2006-09-01
2006-10-01
2006-11-01
2006-12-01
2007-01-01
2007-02-01
2007-03-01
2007-04-01
2007-05-01
2007-06-01
2007-07-01
2007-08-01
2007-09-01
2007-10-01
2007-11-01
2007-12-01
2008-01-01
2008-02-01
2008-03-01
2008-04-01
2008-05-01
2008-06-01
2008-07-01
2008-08-01
2008-09-01
2008-10-01
2008-11-01
2008-12-01
2009-01-01
2009-02-01
2009-03-01
2009-04-01
2009-05-01
2009-06-01
2009-07-01
2009-08-01
2009-09-01
2009-10-01
2009-11-01
2009-12-01
2010-01-01
2010-02-01
2010-03-01
2010-04-01
2010-05-01
2010-06-01
2010-07-01
2010-08-01
2010-09-01
2010-10-01
2010-11-01
2010-12-01
2011-01-01
2011-02-01
2011-03-01
2011-04-01
2011-05-01
2011-06-01
2011-07-01
2011-08-01
2011-09-01
2011-10-01
2011-11-01
2011-12-01
2012-01-01
2012-02-01
2012-03-01
2012-04-01
2012-05-01
2012-06-01
2012-07-01
2012-08-01
2012-09-01
2012-10-01
2012-11-01
2012-12-01
2013-01-01
2013-02-01
2013-03-01
2013-04-01
2013-05-01
2013-06-01
2013-07-01
2013-08-01
2013-09-01
2013-10-01
2013-11-01
2013-12-01
2014-01-01
2014-02-01
2014-03-01
2014-04-01
2014-05-01
2014-06-01
2014-07-01
2014-08-01
2014-09-01
2014-10-01
2014-11-01
2014-12-01
2015-01-01
2015-02-01
2015-03-01
2015-04-01
2015-05-01
2015-06-01
2015-07-01
2015-08-01
2015-09-01
2015-10-01
2015-11-01
2015-12-01
2016-01-01
2016-02-01
2016-03-01
2016-04-01
2016-05-01
2016-06-01
2016-07-01
2016-08-01
2016-09-01
2016-10-01
2016-11-01
2016-12-01
2017-01-01
2017-02-01
2017-03-01
2017-04-01
2017-05-01
2017-06-01
2017-07-01
2017-08-01
2017-09-01
2017-10-01
2017-11-01
2017-12-01
2018-01-01
2018-02-01
2018-03-01
2018-04-01
2018-05-01
2018-06-01
2018-07-01
2018-08-01
2018-09-01
2018-10-01
2018-11-01
2018-12-01
2019-01-01
2019-02-01
2019-03-01
2019-04-01
2019-05-01
2019-06-01
2019-07-01
2019-08-01
2019-09-01
2019-10-01
2019-11-01
2019-12-01
2020-01-01
2020-02-01
Finished 'convert_grid_coordinates' in 0.0065 seconds
Finished 'match_m2m_old' in 7.7755 seconds

In [24]: plt.close("all")

In [25]: plt.imshow(result)
Out[25]: <matplotlib.image.AxesImage at 0x7fa0e2086f40>

In [26]: bedmachine_grid_m[:, :, 2][
     ...     bedmachine_grid_m[:, :, 2] == np.nanmin(bedmachine_grid_m[:, :, 2])
     ... ] = np.nan


In [27]: plt.imshow(bedmachine_grid_m[:, :, 2])
Out[27]: <matplotlib.image.AxesImage at 0x7fa0e203ac40>

In [28]: plt.imshow(result)
Out[28]: <matplotlib.image.AxesImage at 0x7fa0e20685b0>

In [29]: plt.figure(); plt.imshow(bedmachine_grid_m[:, :, 2])
Out[29]: <matplotlib.image.AxesImage at 0x7fa0e11029d0>

In [30]: #!/usr/bin/env python3
     ... 
     ... """
     ... 
     ... @author: Adrien Wehrl√©, University of Zurich, Switzerland
     ... 
     ... and Jason Box
     ... 
     ... """
     ... 
     ... ...
     ...     ) as dst:
     ...         dst.write(np.flipud(dz), 1)
     ... 
     ...     with rasterio.open(
     ...         f"{base_path}/output/dz_10sig_on_bedmachine.tif", "w", **profile
     ...     ) as dst:
     ...         dst.write(dz, 1)
     ... 
     ... 
     ... print("done")


(123, 65)
1990-01-01
1990-02-01
1990-03-01
1990-04-01
1990-05-01
1990-06-01
1990-07-01
1990-08-01
1990-09-01
1990-10-01
1990-11-01
1990-12-01
1991-01-01
1991-02-01
1991-03-01
1991-04-01
1991-05-01
1991-06-01
1991-07-01
1991-08-01
1991-09-01
1991-10-01
1991-11-01
1991-12-01
1992-01-01
1992-02-01
1992-03-01
1992-04-01
1992-05-01
1992-06-01
1992-07-01
1992-08-01
1992-09-01
1992-10-01
1992-11-01
1992-12-01
1993-01-01
1993-02-01
1993-03-01
1993-04-01
1993-05-01
1993-06-01
1993-07-01
1993-08-01
1993-09-01
1993-10-01
1993-11-01
1993-12-01
1994-01-01
1994-02-01
1994-03-01
1994-04-01
1994-05-01
1994-06-01
1994-07-01
1994-08-01
1994-09-01
1994-10-01
1994-11-01
1994-12-01
1995-01-01
1995-02-01
1995-03-01
1995-04-01
1995-05-01
1995-06-01
1995-07-01
1995-08-01
1995-09-01
1995-10-01
1995-11-01
1995-12-01
1996-01-01
1996-02-01
1996-03-01
1996-04-01
1996-05-01
1996-06-01
1996-07-01
1996-08-01
1996-09-01
1996-10-01
1996-11-01
1996-12-01
1997-01-01
1997-02-01
1997-03-01
1997-04-01
1997-05-01
1997-06-01
1997-07-01
1997-08-01
1997-09-01
1997-10-01
1997-11-01
1997-12-01
1998-01-01
1998-02-01
1998-03-01
1998-04-01
1998-05-01
1998-06-01
1998-07-01
1998-08-01
1998-09-01
1998-10-01
1998-11-01
1998-12-01
1999-01-01
1999-02-01
1999-03-01
1999-04-01
1999-05-01
1999-06-01
1999-07-01
1999-08-01
1999-09-01
1999-10-01
1999-11-01
1999-12-01
2000-01-01
2000-02-01
2000-03-01
2000-04-01
2000-05-01
2000-06-01
2000-07-01
2000-08-01
2000-09-01
2000-10-01
2000-11-01
2000-12-01
2001-01-01
2001-02-01
2001-03-01
2001-04-01
2001-05-01
2001-06-01
2001-07-01
2001-08-01
2001-09-01
2001-10-01
2001-11-01
2001-12-01
2002-01-01
2002-02-01
2002-03-01
2002-04-01
2002-05-01
2002-06-01
2002-07-01
2002-08-01
2002-09-01
2002-10-01
2002-11-01
2002-12-01
2003-01-01
2003-02-01
2003-03-01
2003-04-01
2003-05-01
2003-06-01
2003-07-01
2003-08-01
2003-09-01
2003-10-01
2003-11-01
2003-12-01
2004-01-01
2004-02-01
2004-03-01
2004-04-01
2004-05-01
2004-06-01
2004-07-01
2004-08-01
2004-09-01
2004-10-01
2004-11-01
2004-12-01
2005-01-01
2005-02-01
2005-03-01
2005-04-01
2005-05-01
2005-06-01
2005-07-01
2005-08-01
2005-09-01
2005-10-01
2005-11-01
2005-12-01
2006-01-01
2006-02-01
2006-03-01
2006-04-01
2006-05-01
2006-06-01
2006-07-01
2006-08-01
2006-09-01
2006-10-01
2006-11-01
2006-12-01
2007-01-01
2007-02-01
2007-03-01
2007-04-01
2007-05-01
2007-06-01
2007-07-01
2007-08-01
2007-09-01
2007-10-01
2007-11-01
2007-12-01
2008-01-01
2008-02-01
2008-03-01
2008-04-01
2008-05-01
2008-06-01
2008-07-01
2008-08-01
2008-09-01
2008-10-01
2008-11-01
2008-12-01
2009-01-01
2009-02-01
2009-03-01
2009-04-01
2009-05-01
2009-06-01
2009-07-01
2009-08-01
2009-09-01
2009-10-01
2009-11-01
2009-12-01
2010-01-01
2010-02-01
2010-03-01
2010-04-01
2010-05-01
2010-06-01
2010-07-01
2010-08-01
2010-09-01
2010-10-01
2010-11-01
2010-12-01
2011-01-01
2011-02-01
2011-03-01
2011-04-01
2011-05-01
2011-06-01
2011-07-01
2011-08-01
2011-09-01
2011-10-01
2011-11-01
2011-12-01
2012-01-01
2012-02-01
2012-03-01
2012-04-01
2012-05-01
2012-06-01
2012-07-01
2012-08-01
2012-09-01
2012-10-01
2012-11-01
2012-12-01
2013-01-01
2013-02-01
2013-03-01
2013-04-01
2013-05-01
2013-06-01
2013-07-01
2013-08-01
2013-09-01
2013-10-01
2013-11-01
2013-12-01
2014-01-01
2014-02-01
2014-03-01
2014-04-01
2014-05-01
2014-06-01
2014-07-01
2014-08-01
2014-09-01
2014-10-01
2014-11-01
2014-12-01
2015-01-01
2015-02-01
2015-03-01
2015-04-01
2015-05-01
2015-06-01
2015-07-01
2015-08-01
2015-09-01
2015-10-01
2015-11-01
2015-12-01
2016-01-01
2016-02-01
2016-03-01
2016-04-01
2016-05-01
2016-06-01
2016-07-01
2016-08-01
2016-09-01
2016-10-01
2016-11-01
2016-12-01
2017-01-01
2017-02-01
2017-03-01
2017-04-01
2017-05-01
2017-06-01
2017-07-01
2017-08-01
2017-09-01
2017-10-01
2017-11-01
2017-12-01
2018-01-01
2018-02-01
2018-03-01
2018-04-01
2018-05-01
2018-06-01
2018-07-01
2018-08-01
2018-09-01
2018-10-01
2018-11-01
2018-12-01
2019-01-01
2019-02-01
2019-03-01
2019-04-01
2019-05-01
2019-06-01
2019-07-01
2019-08-01
2019-09-01
2019-10-01
2019-11-01
2019-12-01
2020-01-01
2020-02-01
Finished 'convert_grid_coordinates' in 0.0050 seconds
Finished 'match_m2m_old' in 8.4217 seconds
done

In [31]: dz_filled = dz.copy()
     ... 
     ... dz_filled[~np.isfinite(dz_filled)] = bedmachine_grid_m[:, :, 2][~np.isfinite(dz_filled)]


In [32]: plt.figure()
     ... plt.imshow(
     ...     dz_filled,
     ... )

Out[32]: <matplotlib.image.AxesImage at 0x7fa07fb468e0>

In [33]: if wo:
     ...     with rasterio.open(
     ...         f"{base_path}/output/dz_on_bedmachine.tif", "w", **profile
     ...     ) as dst:
     ...         dst.write(dz, 1)
     ... 
     ...     with rasterio.open(
     ...         f"{base_path}/output/dz_10sig_on_bedmachine.tif", "w", **profile
     ...     ) as dst:
     ...         dst.write(dz, 1)
     ... 
     ... 
     ... print("done")

done

In [34]: 